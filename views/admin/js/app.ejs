let calendar = document.querySelector('.calendar')

const month_names = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']

isLeapYear = (year) => {
    return (year % 4 === 0 && year % 100 !== 0 && year % 400 !== 0) || (year % 100 === 0 && year % 400 ===0)
}

getFebDays = (year) => {
    return isLeapYear(year) ? 29 : 28
}

generateCalendar = (month, year) => {
	let calendar_days = calendar.querySelector('.calendar-days')
    let calendar_header_year = calendar.querySelector('#year')

    let days_of_month = [31, getFebDays(year), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]

    calendar_days.innerHTML = ''

    let currDate = new Date()
    if (!month) month = currDate.getMonth()
    if (!year) year = currDate.getFullYear()

    let curr_month = `${month_names[month]}`
    month_picker.innerHTML = curr_month
    calendar_header_year.innerHTML = year
	
    // get first day of month
    
    let first_day = new Date(year, month, 1)
	
	let getData = new URLSearchParams()
	getData.append("getMonth", month)
	getData.append("getYear", year)
	getData.append("regId", <%= ContentData.regId %>)
	var totalArray = []
	
	fetch("<%= ContentData.baseurl %>/getSchedule", {
		credentials: 'same-origin', // <-- includes cookies in the request
		headers: {
			'CSRF-Token': '<%= ContentData.tokens %>' // <-- is the csrf token as a header
		},
		method: 'post',
		body: getData
	})
	.then(function (response) {
		return response.text()
	})
	.then(function (data) {
		var Values = JSON.parse(data);
		var ContentData = Values.data;
		var buttonAdd = document.getElementById("addScheduleBtn");
		buttonAdd.setAttribute("_csrf", ContentData.tokens);
		
		//alert(ContentData.getSchedule)
		//console.log(ContentData.getSchedule.length)
		
		for(var NextDay=0; NextDay<ContentData.getSchedule.length; NextDay++){
			var tempSchedule = ContentData.getSchedule
			var tempArray = []
			if(tempSchedule[NextDay].length > 0){
				for(var NextNum=0; NextNum<tempSchedule[NextDay].length; NextNum++){ 
					var tempDetil = tempSchedule[NextDay]
					var getGrade = ContentData.getGrade
					var getTyCourse = ContentData.getTypeCourse
					var getStudy = ContentData.getStudy
					var getCourseMaterial = getStudy.find(o => o._id == tempDetil[NextNum].studyId)
					
					if(getCourseMaterial !== undefined && getCourseMaterial != ''){
						var GradeObj = getGrade.find(o => o._id == getCourseMaterial.gradeId)
						var TypeObj = getTyCourse.find(o => o._id == getCourseMaterial.typeId)
						var GradeID = GradeObj._id
						var GradeObjName = GradeObj.name
						var CourseID = TypeObj._id
						var CourseName = TypeObj.name
					} else {
						var GradeID = ''
						var GradeObjName = ''
						var CourseID = ''
						var CourseName = ''
					}
					
					var Months = month+1
					if(Months < 10) Months = '0'+Months
			
					if(year+"-"+Months == tempDetil[NextNum].dateStart.substr(0, 7)){
						var ObVal = Object.create({
							'_id': tempDetil[NextNum]._id,
							'studyId': tempDetil[NextNum].studyId,
							'courseId': CourseID,
							'gradeId': GradeID,
							'clientId': tempDetil[NextNum].clientId,
							'status': tempDetil[NextNum].status,
							'dateStart': tempDetil[NextNum].dateStart,
							'dateEnd': tempDetil[NextNum].dateEnd,
							'gradeName': GradeObjName,
							'courseName': CourseName
						});
						tempArray.push(ObVal);
					}
				}
				
				totalArray[NextDay] = tempArray;
			} else { 
				totalArray[NextDay] = [];
			}
		}
		
		// GENERATE CALENDAR
		for (let i = 0; i <= days_of_month[month] + first_day.getDay() - 1; i++) {
			let day = document.createElement('div')
			if (i >= first_day.getDay()) {
				var dayNumber = i - first_day.getDay() + 1
				var dataNumber = dayNumber - 1
				
				day.classList.add('calendar-day-hover')
				day.innerHTML = dayNumber
				day.innerHTML += `<span></span>
								<span></span>
								<span></span>
								<span></span>`
				if (i - first_day.getDay() + 1 === currDate.getDate() && year === currDate.getFullYear() && month === currDate.getMonth()) {
					day.classList.add('curr-date')
				}
				
				if(totalArray.length > 0){
					
					if(totalArray[dataNumber].length>0) {
						day.setAttribute("total-data", totalArray[dataNumber].length)
						for(var nd=0; nd<totalArray[dataNumber].length; nd++){
							var datascheduleId = "data-scheduleId-" + nd
							var datastudyId = "data-studyId-" + nd
							//var datacourseId = "data-courseId-" + nd
							var dataclientId = "data-clientId-" + nd
							var datadateStart = "data-dateStart-" + nd
							var datadateEnd = "data-dateEnd-" + nd
							var datastatus = "data-status-" + nd
							var dataGC = "data-gc-" + nd
							var dataname = "data-name-" + nd
							var detilData = totalArray[dataNumber]
							//console.log(detilData[nd]._id);
							
							day.setAttribute(datascheduleId, detilData[nd]._id)
							day.setAttribute(datastudyId, detilData[nd].studyId)
							//day.setAttribute(datacourseId, detilData[nd].courseId)
							day.setAttribute(dataclientId, detilData[nd].clientId)
							day.setAttribute(datadateStart, detilData[nd].dateStart)
							day.setAttribute(datadateEnd, detilData[nd].dateEnd)
							day.setAttribute(datastatus, detilData[nd].status)
							day.setAttribute(dataGC, detilData[nd].gradeName)
							day.setAttribute(dataname, detilData[nd].courseName)
						}
						day.setAttribute("style", "color: red !important")
					} else { day.setAttribute("total-data", 0) }
				}
				
				day.setAttribute("id", "dayId-"+dayNumber)
				day.setAttribute("data-day", dayNumber)
				day.setAttribute("data-month", month)
				day.setAttribute("data-year", year)
				day.setAttribute("onClick", "dayEvent(this)")
			}
			calendar_days.appendChild(day)
		}
		
	})
	.catch(function (error) {
			swal("Failed", error.message, "error")
	});
	
}

let month_list = calendar.querySelector('.month-list')

month_names.forEach((e, index) => {
    let month = document.createElement('div')
    month.innerHTML = `<div data-month="${index}">${e}</div>`
    month.querySelector('div').onclick = () => {
        month_list.classList.remove('show')
        curr_month.value = index
        generateCalendar(index, curr_year.value)
    }
    month_list.appendChild(month)
})

let month_picker = calendar.querySelector('#month-picker')

month_picker.onclick = () => {
    month_list.classList.add('show')
}

let currDate = new Date()

let curr_month = {value: currDate.getMonth()}
let curr_year = {value: currDate.getFullYear()}

generateCalendar(curr_month.value, curr_year.value)

document.querySelector('#prev-year').onclick = () => {
    --curr_year.value
    generateCalendar(curr_month.value, curr_year.value)
}

document.querySelector('#next-year').onclick = () => {
    ++curr_year.value
    generateCalendar(curr_month.value, curr_year.value)
}

let dark_mode_toggle = document.querySelector('.dark-mode-switch')

dark_mode_toggle.onclick = () => {
    document.querySelector('body').classList.toggle('light')
    document.querySelector('body').classList.toggle('dark')
}