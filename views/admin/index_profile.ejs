<!DOCTYPE html>
<html lang="en">
    <head>
		<meta charset="utf-8">
		<meta http-equiv="X-UA-Compatible" content="IE=edge">
		<meta name="robots" content="noindex">
		<meta name="google-signin-client_id" content="<%= GClientID() %>">
		<meta name="viewport" content="width=device-width, initial-scale=1">
		<% if(ContentData.tokens !== undefined && ContentData.tokens != ""){ %>
		<meta name="csrf-token" content="<%= ContentData.tokens %>">
		<% } %>
        <title>SEBIS Les Admin | Profile</title>

        <link href="https://sebisedu.co.id/edu/assets/images/favicon/favicon.png" rel="icon">

        <!-- ========== COMMON STYLES ========== -->
        <link rel="stylesheet" href="/options_admin/css/bootstrap.min.css" media="screen" >
        <link rel="stylesheet" href="/options_admin/css/font-awesome.min.css" media="screen" >
        <link rel="stylesheet" href="/options_admin/css/animate-css/animate.min.css" media="screen" >
        <link rel="stylesheet" href="/options_admin/css/lobipanel/lobipanel.min.css" media="screen" >

        <!-- ========== PAGE STYLES ========== -->
        <link rel="stylesheet" href="/options_admin/css/jquery-steps/jquery.steps.css" >

        <!-- ========== THEME CSS ========== -->
        <link rel="stylesheet" href="/options_admin/css/main.css" media="screen" >

        <link rel="stylesheet" href="/options_admin/css/dropzone/dropzone.min.css" >
        <link rel="stylesheet" href="/options_admin/css/sweet-alert/sweetalert.css" media="screen" >
        <link rel="stylesheet" type="text/css" href="/options_admin/css/date-picker/jquery.timepicker.css" />
        <link rel="stylesheet" type="text/css" href="/options_admin/css/date-picker/bootstrap-datepicker.css" />
        <link rel="stylesheet" href="https://unpkg.com/vue-form-wizard/dist/vue-form-wizard.min.css">

        <style>
            .img-picker {
                object-fit: contain;
                width: 300px;
                height: 150px;
            }
            .wizard-icon-circle {
                width: 3rem !important;
                height: 3rem !important;
            }
        </style>


        <!-- ========== MODERNIZR ========== -->
        <script src="/options_admin/js/modernizr/modernizr.min.js"></script>
    </head>
    <body class="top-navbar-fixed">
		<script>
		console.log("<%= ContentData.getIdentities.pushType %>");
		function initGoogle() {
			gapi.load('auth2', function() {
				var auth2 = gapi.auth2.init({client_id: '<%= GClientID() %>'});
				//gapi.auth2.init();
			});
		}
		
		function googleLogout(identifier) {
			var GStatus = identifier.getAttribute("data-google");
			if(GStatus == "google"){
				gapi.auth2.getAuthInstance().disconnect().then(function () {
					localStorage.removeItem("userProfile");
					location.replace('/logout');
				}); 
			} else {
				localStorage.removeItem("userProfile");
				location.replace('/logout');
			}
			
		}
		</script>
        <div class="main-wrapper">
			<%- include("top-nav.ejs") %>

            <!-- ========== WRAPPER FOR BOTH SIDEBARS & MAIN CONTENT ========== -->
            <div class="content-wrapper">
                <div class="content-container">
					<%- include("left-sidebar.ejs") %>
					<%- include("mainpage_profile.ejs") %>
                </div>
                <!-- /.content-container -->
            </div>
            <!-- /.content-wrapper -->
        </div>
        <!-- /.main-wrapper -->

       <!-- ========== COMMON JS FILES ========== -->
        <script src="/options_admin/js/jquery/jquery-2.2.4.min.js"></script>
        <script src="/options_admin/js/bootstrap/bootstrap.min.js"></script>
        <script src="/options_admin/js/pace/pace.min.js"></script>
        <script src="/options_admin/js/lobipanel/lobipanel.min.js"></script>
        <script src="/options_admin/js/iscroll/iscroll.js"></script>

        <!-- ========== PAGE JS FILES ========== -->
        <script src="/options_admin/js/prism/prism.js"></script>
        <script src="/options_admin/js/jquery-validate/jquery.validate.min.js"></script>
        <script src="/options_admin/js/jquery-steps/jquery.steps.min.js"></script>

        <!-- ========== THEME JS ========== -->
        <script src="/options_admin/js/main.js"></script>

        <!-- ========== ADD custom.js FILE BELOW WITH YOUR CHANGES ========== -->
        <script type="text/javascript" src="/options_admin/js/date-picker/bootstrap-datepicker.js"></script>
        <script type="text/javascript" src="/options_admin/js/date-picker/jquery.timepicker.js"></script>
        <script type="text/javascript" src="/options_admin/js/date-picker/datepair.js"></script>
        <script type="text/javascript" src="/options_admin/js/date-picker/moment.js"></script>
        <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.47/js/bootstrap-datetimepicker.min.js"></script>
        <script src="/options_admin/js/prism/prism.js"></script>
        <!-- <script src="js/dropzone/dropzone.min.js"></script> //-->
        <script src="/options_admin/js/sweet-alert/sweetalert.min.js"></script>
        <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
        <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/browser-image-compression@1.0.14/dist/browser-image-compression.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js"></script>
        <script src="https://unpkg.com/vue-form-wizard/dist/vue-form-wizard.js"></script>
		<% if(ContentData.Google) { %>
		<script src="https://apis.google.com/js/platform.js?onload=initGoogle" async defer></script>
		<% } %>
        <!-- ========== ADD custom.js FILE BELOW WITH YOUR CHANGES ========== -->
		<script>

            //const siteUrl = 'http://192.168.1.10:3000'
            const updateProfileUrl  = '/profile/editRawData/<%= ContentData.getIdentities._id %>/<%= ContentData.getPeople.email %>'
            const uploadImageUrl  = '/profile/sendImg/<%= ContentData.getIdentities._id %>/<%= ContentData.getPeople.email %>'

            const compressOptions = {
                maxSizeMB: 1,
                maxWidthOrHeight: 1920,
                useWebWorker: true,
            }

            const app = new Vue({
                el: '#app',
                mounted() {
                    $('#datepickerBasic').datetimepicker({
                        viewMode: 'years',
                        format: 'DD/MM/YYYY'
                    }).on('dp.change', () => {
                        this.user.birth_date = $('#datepickerBasic input').val()
                    })
                    $('#teachFromDate').datetimepicker({
                        viewMode: 'years',
                        format: 'MM/YYYY'
                    }).on('dp.change', () => {
                        this.teaching_experience.from = $('#teachFromDate input').val()
                    })
                    $('#teachToDate').datetimepicker({
                        viewMode: 'years',
                        format: 'MM/YYYY'
                    }).on('dp.change', () => {
                        this.teaching_experience.to = $('#teachToDate input').val()
                    })
                    $('#eduFromDate').datetimepicker({
                        viewMode: 'years',
                        format: 'MM/YYYY'
                    }).on('dp.change', () => {
                        this.education.from = $('#eduFromDate input').val()
                    })
                    $('#eduToDate').datetimepicker({
                        viewMode: 'years',
                        format: 'MM/YYYY'
                    }).on('dp.change', () => {
                            this.education.to = $('#eduToDate input').val()
                    })
                },
                created() {
                    if (this.user.type === 'public') {
                        if (localStorage.getItem('userProfile') === null)
                            localStorage.setItem('userProfile', '')
                        else
                            this.getProfileFromLocal()
                    }
                },
                data() {
                    return {
                        // siteUrl: 'http://192.168.1.10:3000/',
                        // initiate wizard
                        // if status != public
						<% var startWizard = 0; %>
						<% if(ContentData.getIdentities.userType != "public") startWizard = 4; %>
						<%
							var birthDate			= ContentData.getPeopleInfo.birthDate;
							if(birthDate != ""){
								var bln 				= birthDate.substr(0, 2);
								var tgl 				= birthDate.substr(3, 2);
								var thn 				= birthDate.substr(6, 4);
								birthDate	 			= tgl+"/"+bln+"/"+thn;
							}
						%>
                        startWizard: <%= startWizard %>,
                        // user profile
                        user: {
                            type: '<%= ContentData.getIdentities.userType %>',
                            // step 1
                            uid: "",
                            name: "<%= ContentData.peopleName %>",
                            gender: "<%= ContentData.getPeopleInfo.gender %>",
                            phone: "<%= ContentData.getPeople.phone %>",
                            religion: "<%= ContentData.getPeopleInfo.religion %>",
                            birth_place: "<%= ContentData.getPeopleInfo.birthPlace %>",
                            birth_date: "<%= birthDate %>",
                            // step 2
                            id_type: "<%= ContentData.getPeopleInfo.cardType %>",
                            id_number: "<%= ContentData.getPeopleInfo.cardId %>",
                            address: "<%= ContentData.getPeopleInfo.address %>",
                            city: "<%= ContentData.getPeopleInfo.city %>",
                            state: "<%= ContentData.getPeopleInfo.province %>",
                            postal_code: "<%= ContentData.getPeopleInfo.postalcode %>",
                            about_me: "<%= ContentData.getPeople.nameEng %>",
                            ytlink: "<%= ContentData.getPeopleInfo.avatarUrl %>",
                            // step 3
                            teaching_experiences: [
							<% var TeachData = ContentData.getTeachExp; %>
							<% if(TeachData.length > 0){ %>
								<% for(var tc=0; tc<TeachData.length; tc++){ var temptech = TeachData[tc]; %>
								{
									tid: '<%= temptech._id %>',
									school: '<%= temptech.school %>',
									city: '<%= temptech.city %>',
									class: '<%= temptech.grade %>',
									subject: '<%= temptech.course %>',
									teaching_status: '<%= temptech.status %>',
									from: '<%= temptech.fromDate %>',
									to: '<%= temptech.toDate %>',
									portofolio: '<%= temptech.desc %>',
								},
							<% } } %>
                            ],
                            // step 4
                            educations: [
							<% var EduData = ContentData.getEduBg; %>
							<% if(EduData.length > 0){ %>
								<% for(var eb=0; eb<EduData.length; eb++){ var tempedu = EduData[eb]; %>
								{
									eid: '<%= tempedu._id %>',
									major: '<%= tempedu.major %>',
									level: '<%= tempedu.strata.toLowerCase() %>',
									college: '<%= tempedu.institution %>',
									thesis: '<%= tempedu.thesis %>',
									from: '<%= tempedu.fromDate %>',
									to: '<%= tempedu.toDate %>',
									score: '<%= tempedu.score %>',
								},
							<% } } %>
                            ],
                            // step 5
                            profile_img_url: "<%= ContentData.avatarThumb %>",
                            selfie_card_img_url: "<%= ContentData.selfieThumb %>",
                            id_card_img_url: "<%= ContentData.cardThumb %>",
                            diploma_img_url: "<%= ContentData.certificateThumb %>",
                        },
                        // end of user profile

                        // temporary user input
                        teaching_experience: {
							tid: '',
                            school: '',
                            city: '',
                            class: '',
                            subject: '',
                            teaching_status: '',
                            from: '',
                            to: '',
                            portofolio: '',
                        },
                        education: {
							eid: '',
                            major: '',
                            level: '',
                            college: '',
                            thesis: '',
                            from: '',
                            to: '',
                            score: '',
                        },
                        // end of temporary user input

                        // user fields
                        education_levels: [
                            {
                                value: 's1',
                                description: 'S1',
                            },
                            {
                                value: 's2',
                                description: 'S2',
                            },
                            {
                                value: 's3',
                                description: 'S3',
                            },
                        ],
                        grades: [
						<% var Grade = ContentData.getGrade; %>
						<% for(var cg=0; cg<Grade.length; cg++){ var tempGrade = Grade[cg]; %>
                            {
                                value: '<%= tempGrade._id %>',
                                description: '<%= tempGrade.name %>',
                            },
						<% } %>
                        ],
                        teaching_statuses: [
                            {
                                value: 'freelance',
                                description: 'Freelance',
                            },
                            {
                                value: 'contract',
                                description: 'Contract',
                            },
                            {
                                value: 'fulltime',
                                description: 'FullTime',
                            },
                            {
                                value: 'private',
                                description: 'Private',
                            },
                        ],
                        // end of user fields

                        // REMOVE THIS
                        current_user: {
                            level: 'Teacher',
                            status: 0,
                            profile_img_url: 'images/profile/profile.jpeg',
                            id_img_url: "",
                            selfie_img_url: "",
                            diploma_img_url: "",
                        },
                    }
                },
                methods: {
					getDescription(listData, code) {
                        let description
                        listData.forEach(function (data) {
                            if (data.value === code)
                                description = data.description
                        })
                        return description
                    },
                    getProfileFromLocal() {
                        this.user = JSON.parse(localStorage.getItem('userProfile'))
                    },
                    saveProfileToLocal() {
                        localStorage.setItem('userProfile', JSON.stringify(this.user))
                    },
                    updateProfile() {
                        return new Promise((resolve, reject) => {
                            axios.post(updateProfileUrl, this.user).then((res) => {
                                resolve(res)
                            }).catch(err => reject(err))
                        })
                    },
                    onComplete() {
                        if (this.user.profile_img_url && this.user.id_card_img_url && this.user.selfie_card_img_url && this.user.diploma_img_url) {
                            const app = this
                            if (this.user.type === 'pteacher') {
                                swal({
                                    title: 'Pending',
                                    text: "Pengajuan anda sedang dalam proses!",
                                    type: 'warning',
                                }, function() {
                                    window.location = "/home";
                                })
                            } else {
                                swal({
                                    title: 'Apa anda yakin data yang anda masukkan benar?',
                                    // text: "You won't be able to revert this!",
                                    type: 'warning',
                                    showCancelButton: true,
                                    confirmButtonColor: '#3085d6',
                                    cancelButtonColor: '#d33',
                                    cancelButtonText: 'Tidak',
                                    confirmButtonText: 'Yakin',
                                    closeOnConfirm: false,
                                    closeOnCancel: true,
                                }, function (isConfirm) {
                                    if (isConfirm) {
                                        app.updateProfile().then(() => {
                                            // app.user.type = 'pteacher'
                                            // app.saveProfileToLocal()
                                            swal({
                                                html: true,
                                                type: 'success',
                                                title: 'Sukses',
                                                text: 'Data berhasil disimpan!<br>CS SEBIS Les akan menghubungi anda.'
                                            }, function () {
                                                location.href = '/home'
                                            })
                                        }).catch(() => {
                                            swal({
                                                html: true,
                                                title: "Gagal",
                                                text: 'Gagal menyimpan profil!<br>Silahkan menghubungi CS SEBIS Les untuk informasi lebih lanjut.<br><br>WA: <a href="whatsapp://send?text=Saya%20mengalami%20kendala%20pada%20saat%20pendaftaran%20Tutor%20Online%20SEBIS%20Les&phone=+6281990312184">081990312184</a>',
                                                type: "error",
                                            })
                                        })
                                    }
                                })
                            }
                        } else {
                            swal("Gagal", "Anda belum melengkapi berkas foto!", "error")
                        }
                    },
                    modalAddTeachingExp() {
                        this.teaching_experience = {
							tid: '',
                            school: '',
                            city: '',
                            class: '',
                            subject: '',
                            teaching_status: '',
                            from: '',
                            to: '',
                            portofolio: '',
                        }
                        $('#addTeachingModal').modal('show')
                    },
                    modalAddEducation() {
                        this.education = {
							eid: '',
                            major: '',
                            level: '',
                            college: '',
                            thesis: '',
                            from: '',
                            to: '',
                            score: '',
                        }
                        $('#addEducationModal').modal('show')
                    },
                    addTeachingExperience() {
                        this.user.teaching_experiences.push(this.teaching_experience)
                        $('#addTeachingModal').modal('hide')
                        this.saveProfileToLocal()
                    },
                    addEducationBackground() {
                        this.user.educations.push(this.education)
                        $('#addEducationModal').modal('hide')
                        this.saveProfileToLocal()
                    },
                    beforeTab1() {
                        this.saveProfileToLocal()
                        if (this.user.name && this.user.gender && this.user.phone && this.user.religion && this.user.birth_place && this.user.birth_date)
                            return true
                        else {
                            swal("Gagal", "Anda belum melengkapi informasi dasar!", "error")
                            return false
                        }
                    },
                    beforeTab2() {
                        this.saveProfileToLocal()
                        if (this.user.id_type && this.user.id_number && this.user.address && this.user.city && this.user.state && this.user.postal_code && this.user.about_me)
                            return true
                        else {
                            swal("Gagal", "Anda belum melengkapi data diri!", "error")
                            return false
                        }
                    },
                    beforeTab3() {
                        this.saveProfileToLocal()
                        if (this.user.teaching_experiences && this.user.teaching_experiences.length > 0)
                            return true
                        else {
                            swal("Gagal", "Anda belum mengisi pengalaman mengajar!", "error")
                            return false
                        }
                    },
                    beforeTab4() {
                        this.saveProfileToLocal()
                        if (this.user.educations && this.user.educations.length > 0)
                            return true
                        else {
                            swal("Gagal", "Anda belum mengisi latar belakang pendidikan!", "error")
                            return false
                        }
                    },
                    uploadImage(name, imgFile) {
                        return new Promise((resolve, reject) => {
                            let formData = new FormData()
                            formData.append(name, imgFile)
                            axios.post(uploadImageUrl, formData, {
                                headers: {
                                    'Content-Type': 'multipart/form-data'
                                }
                            }).then((res) => {
                                resolve(res.data.urlpath)
                            }).catch((err) => reject(err))
                        })
                    },
                    imgProfileChange(event) {
                        if (event.target.files && event.target.files[0]) {
                            let reader = new FileReader()

                            reader.onload = function (e) {
                                $('#profileImgPreview').attr('src', e.target.result)
                            }

                            let imgFile = event.target.files[0]
                            imageCompression(imgFile, compressOptions).then((output) => {
                                const newFile = new File([output], imgFile.name, {
                                    type: output.type
                                });
                                this.uploadImage('imgProfile', newFile).then((path) => {
                                    // set value
                                    this.user.profile_img_url = path
                                    this.saveProfileToLocal()
                                    reader.readAsDataURL(newFile)
                                })
                                // reader.readAsDataURL(newFile)
                                // return newFile
                            })
                        }
                    },
                    imgIdChange(event) {
                        if (event.target.files && event.target.files[0]) {
                            let reader = new FileReader()
                            reader.onload = function (e) {
                                $('#idImgPreview').attr('src', e.target.result)
                            }
                            let imgFile = event.target.files[0]
                            imageCompression(imgFile, compressOptions).then((output) => {
                                const newFile = new File([output], imgFile.name, {
                                    type: output.type
                                });
                                this.uploadImage('imgIDCard', newFile).then((path) => {
                                    // set value
                                    this.user.id_card_img_url = path
                                    this.saveProfileToLocal()
                                    reader.readAsDataURL(newFile)
                                })
                            })
                        }
                    },
                    imgSelfieChange(event) {
                        if (event.target.files && event.target.files[0]) {
                            let reader = new FileReader()
                            reader.onload = function (e) {
                                $('#selfieImgPreview').attr('src', e.target.result)
                            }

                            let imgFile = event.target.files[0]
                            imageCompression(imgFile, compressOptions).then((output) => {
                                const newFile = new File([output], imgFile.name, {
                                    type: output.type
                                });
                                this.uploadImage('imgSelfie', newFile).then((path) => {
                                    // set value
                                    this.user.selfie_card_img_url = path
                                    this.saveProfileToLocal()
                                    reader.readAsDataURL(newFile)
                                })
                            })
                        }
                    },
                    imgDiplomaChange(event) {
                        if (event.target.files && event.target.files[0]) {
                            let reader = new FileReader()
                            reader.onload = function (e) {
                                $('#diplomaImgPreview').attr('src', e.target.result)
                            }
                            let imgFile = event.target.files[0]
                            imageCompression(imgFile, compressOptions).then((output) => {
                                const newFile = new File([output], imgFile.name, {
                                    type: output.type
                                });
                                this.uploadImage('imgCertificate', newFile).then((path) => {
                                    // set value
                                    this.user.diploma_img_url = path
                                    this.saveProfileToLocal()
                                    reader.readAsDataURL(newFile)
                                })
                            })
                        }
                    },
                },
            })
            
        </script>
    </body>
</html>
